#!/bin/bash
cd ~/Harmony
printf "\033c"
while true; do
	PS3='What do you want to do? '
	options=("Edit" "Compile" "Git" "Run" "Dump" "Self-Edit" "Quit")
	select opt in "${options[@]}"
	do
		case $opt in
			"Edit")
				PS3='What project do you want to edit? '
				cd src
				options2=( * "New" )
				select opt2 in "${options2[@]}"
				do
					case $opt2 in
						"New")
							echo "What name? "
							read pname
							mkdir "$pname"
							cd "$pname"
							break
							;;
						*)
							cd "$opt2"
							break
							;;
					esac
				done

				PS3='What file do you want to edit? '
				options3=( * "New" )
				select opt3 in "${options3[@]}"
				do
					case $opt3 in
						"New")
							echo "What filename? "
							read fname
							nano -wS "$fname"
							cd ../..
							break 2
							;;
						*)
							nano -wS "$opt3"
							cd ../..
							break 2
							;;
					esac
				done
				break
				;;
			"Compile")
				mount image
				cd src
				link=""
				libgcc="$(i686-elf-gcc $CFLAGS -print-libgcc-file-name)"
				for dir in *; do
					echo "Compiling $dir..."
					cd $dir
					rm -rf "../../bin/$dir"
					mkdir "../../bin/$dir"
					for file in *; do
						echo "Compiling $file..."
						ext="${file##*.}"
						if [ $ext = "s" ]; then
							o=$(basename "$file" .s)
							o+=".o"
							nasm -felf32 "$file" -o "../../bin/$dir/$o"
							echo "Compiled as $o!"
						elif [ $ext = "c" ]; then
							o=$(basename "$file" .c)
							o+=".o"
							i686-elf-gcc -c "$file" -o "../../bin/$dir/$o" -m32 -nostdlib -nostdinc -fno-builtin -fno-stack-protector -nostartfiles -Wall -Wextra -Werror -Wno-overflow -fverbose-asm -g -O2 -lgcc
							echo "Compiled as $o!"
						elif [ $ext = "ld" ]; then
							echo "LD file found, no need to compile."
							link="$dir/$file"
						elif [ $ext = "h" ]; then
							echo "H file found, no need to compile."
						elif [ $ext = "cfg" ]; then
							echo "CFG file found, no need to compile."
						else
							echo "File $file has unknown extension!" >&2
						fi
					done
					cd "../../bin/$dir"
					files=( * )
					echo "To compile: ${files[@]}"
					read -r type<"../../src/$link"
					if [[ $type == *"ELF"* ]]; then
						if i686-elf-ld -T "../../src/$link" "${files[@]}" "$libgcc" -o "../${dir}.elf"; then
							echo "Compiled as ELF!"
						else
							echo "Error in compilation!" >&2
						fi
					elif [[ $type == *"BIN"* ]]; then
						if i686-elf-ld -T "../../src/$link" "${files[@]}" "$libgcc" -o "../${dir}.bin"; then
             						echo "Compiled as BIN! Note: BIN not currently supported."
           						#cp "../${dir}.bin" ../../image/modules
						else
                    					echo "Error in compilation!" >&2
            					fi
					else
						echo "Format not found!" >&2
					fi
					cd ../../src
				done
				cd ..
				cp bin/Harmony.elf image/boot
				cp src/Harmony/grub.cfg image/boot/grub
				read -rsp $'Press any key to continue...\n' -n1 key
				printf "\033c"
				sync
				break
				;;
			"Git")
				while true; do
					optiong=("Commit" "Push" "Pull" "Edit Gitignore" "Back")
					select optg in "${optiong[@]}"
					do
						case $optg in
							"Commit")
								git add --all
								git commit
								read -rsp $'Press any key to continue...\n' -n1 key
								break
								;;
							"Push")
								git push
								read -rsp $'Press any key to continue...\n' -n1 key
								break
								;;
							"Pull")
								git pull
								read -rsp $'Press any key to continue...\n' -n1 key
								break
								;;
							"Edit Gitignore")
								nano .gitignore
								break
								;;
							"Back")
								break 2
								;;
						esac
					done
					printf "\033c"
				done
				break
				;;
			"Run")
				#cp src/Harmony/bochs.cfg bochsrc.txt
				#bochs -f bochsrc.txt -q
				qemu-system-i386 -hda Harmony.img -m 1024 -monitor stdio
				sync
				read -rsp $'Press any key to continue...\n' -n1 key
				printf "\033c"
				break
				;;
			"Dump")
				mount image
				i686-elf-objdump -M intel -S -l -D image/boot/Harmony.elf > objdump.txt
				nano -wS objdump.txt
				rm -f objdump.txt
				sync
				read -rsp $'Press any key to continue...\n' -n1 key
                                printf "\033c"
				break
				;;
			"Self-Edit")
				nano "Harmony"
				./Harmony
				exit
				;;
			"Quit")
				break 2
				;;
			*) echo Invalid Option;;
		esac
	done
	printf "\033c"
done
